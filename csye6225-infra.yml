---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates a VPC with 3 subnets in 3 different availability zones in an AWS region. Generate an EC2 instance"
#Parameters to be provided by the user.
Parameters:
  VPCCIDRBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "VPC"
  AMIId:
    Description: The id of the AMI used to generate the EC2 instance
    Type: String

#Mappings of different regions.
#Creates subnets based on the AWS_REGION
Mappings:
  AZRegions:
    us-east-1:
      AZs: ["a", "b", "c"]
    us-east-2:
      AZs: ["a", "b", "c"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b", "c"]
    ap-northeast-1:
      AZs: ["a", "b", "c"]
    ap-northeast-2:
      AZs: ["a", "b", "c"]
    ap-south-1:
      AZs: ["a", "b", "c"]
    ap-southeast-1:
      AZs: ["a", "b", "c"]
    ap-southeast-2:
      AZs: ["a", "b", "c"]
    ca-central-1:
      AZs: ["a", "b", "c"]
    eu-central-1:
      AZs: ["a", "b", "c"]
    eu-west-1:
      AZs: ["a", "b", "c"]
    eu-west-2:
      AZs: ["a", "b", "c"]
    sa-east-1:
      AZs: ["a", "b", "c"]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !Ref "VPCCIDRBlock"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - Ref: "AWS::StackName"
              - "-"
              - !Ref "VPCName"

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 3, 14]]
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "AWS::StackName"
              - "-"
              - !Ref "VPCName"
              - "-public-"
              - !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 3, 14]]
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "AWS::StackName"
              - "-"
              - !Ref "VPCName"
              - "-public-"
              - !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]


  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [2, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 3, 14]]
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "AWS::StackName"
              - "-"
              - !Ref "VPCName"
              - "-public-"
              - !Select [2, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]

  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "AWS::StackName"
                - "-"
                - !Ref "VPCName"
                - '-IGW'

  GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"

  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref  "AWS::StackName"
                - "-"
                - !Ref "VPCName"
                - '-public-route-table'

  PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        RouteTableId:
          Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        RouteTableId:
          Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation2:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet2"
        RouteTableId:
          Ref: "PublicRouteTable"

  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow traffic to ports 80, 443, 3306"
      VpcId:
         Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"     
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: "0.0.0.0/0"
      Tags:
          -
            Key: "Name"
            Value: "application"

  MyEC2Instance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !Ref "AMIId"
      InstanceType : "t2.micro"
      DisableApiTermination : "false"
      KeyName: "dev-ssh-key"
      SecurityGroupIds:
        - !Ref "InstanceSecurityGroup"
      SubnetId: !Ref "PublicSubnet0"
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "20"
      Tags:
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref  "AWS::StackName"
                - "-"
                - 'EC2'